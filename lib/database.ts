import { Generated, ColumnType, Selectable, Insertable, Updateable } from 'kysely'
import { createKysely } from '@vercel/postgres-kysely';
  
  
interface ColoringTable {
    // Columns that are generated by the database should be marked
    // using the `Generated` type. This way they are automatically
    // made optional in inserts and updates.
    id: Generated<number>
  
    name: string
    file: string
    tags: string  
    // You can specify a different type for each operation (select, insert and
    // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
    // wrapper. Here we define a column `created_at` that is selected as
    // a `Date`, can optionally be provided as a `string` in inserts and
    // can never be updated:
    created_at: ColumnType<Date, string | undefined, never>
}

interface Database {
    colorings: ColoringTable
 }

 export const db = createKysely<Database>();
 export { sql } from 'kysely'
  
  // You should not use the table schema interfaces directly. Instead, you should
  // use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
  // make sure that the correct types are used in each operation.
  export type Coloring = Selectable<ColoringTable>
  export type NewColoring = Insertable<ColoringTable>
  export type ColoringUpdate = Updateable<ColoringTable>
  
